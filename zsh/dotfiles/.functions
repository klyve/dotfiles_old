#!/usr/bin/env bash

function reload {
    source ~/.zshrc
}

function pg-start {
    pg_ctl -D /usr/local/var/postgres start
}

function pg-restart {
    pg_ctl -D /usr/local/var/postgres restart
}

function mongo-start {
    mongod --config /usr/local/etc/mongod.conf
}

function redis-start {
    redis-server /usr/local/etc/redis.conf
}


function dev {
    if [ -z $1 ]; then
        if [ -z $DEFAULT_DEV_ENV ]; then
            echo "usage: dev <environment>"
            echo "Or export \$DEFAULT_DEV_ENV"
            return
        fi
    fi
    ENVIRONMENT=${1:-$DEFAULT_DEV_ENV}

    file=$(find $DEV_ENVPATH -name "$ENVIRONMENT.sh")
    if [ -z $file ]; then
        echo "Environment shell file not found in path $DEV_ENVPATH/$ENVIRONMENT.sh"
        return
    fi
    source $file
    echo "Environemt $ENVIRONMENT Loaded"
}

function prune-node {
    find . -name "node_modules" -type d -prune -exec rm -rf '{}' +
}

# Sign in to ECR 
function ecr-login {
    REGION=${AWS_REGION:-eu-central-1}  # Region to authenticate against
    PROFILE=${AWS_PROFILE:-default}     # AWS profile to use
    $(aws ecr get-login --no-include-email --region $REGION --profile $PROFILE)
}

# Get the aws-iam-authenticator token
function aws-token {
    TOKEN_ENV=${1:-$AWS_ENVIRONMENT}
    if [ -z "$TOKEN_ENV" ]; then
        echo "Argument (environment) or env var AWS_ENVIRONMENT must be set to run this command"
    else
        aws-iam-authenticator token -i $TOKEN_ENV | jq '.status.token' --raw-output
    fi
}

# Authenticate with samlAuth using aws-google-auth
function saml-auth {
    IPD_ID=${GIP_ID} # Google SSO IDP identifier
    SP_ID=${GSP_ID} # Google SSO SP identifier
    DURATION=${AWS_DURATION:-28800} # Duration set for the aws role
    REGION=${AWS_REGION:-eu-central-1} # Region to authenticate against
    PROFILE=${AWS_PROFILE:-default} # AWS profile to use
    SAML_USER=${1:-$GSAML_USER} # Saml user or first input to use for authentication

    # [-a] Saves password in keychain
    # [-k] Always ask for iam role
    aws-google-auth -u $SAML_USER -I $IPD_ID -S $SP_ID -R $REGION -d $DURATION -p $PROFILE -a -k
}

# Set up kubernetes config
function kube-conf {
    REGION=${AWS_REGION:-eu-central-1} # Region to use for kubeconf
    aws --region $REGION eks update-kubeconfig --name ${1:-$AWS_ENVIRONMENT}
}

function proxy-vault {
    VAULT_POD=$(kubectl get pods -n infrastructure -l "app=vault" -o jsonpath="{.items[0].metadata.name}")
    kubectl port-forward -n infrastructure $VAULT_POD 8200
}
function proxy-argo {
    kubectl port-forward svc/argocd-server -n argocd 8080:443
}
function proxy-consul {
    kubectl port-forward svc/consul -n infrastructure 8500
}
function proxy-kafka {
    kubectl port-forward svc/kafka -n infrastructure 9092
}

function serveo {
    if [[ $# -lt 2 ]]; then
        echo "Useage serveo <name> <port>"
    else
        ssh -R $1:80:localhost:$2 serveo.net
    fi
}



function bltc {
    [ `uname -s` != "Darwin" ] && echo "Cannot run on non-macosx system." && return
    osascript -i <<EOF
tell application "System Events" to tell process "SystemUIServer"
	set bt to (first menu bar item whose description is "bluetooth") of menu bar 1
	click bt
	tell (first menu item whose title is "$1") of menu of bt
		click
		tell menu 1
			if exists menu item "Connect" then
				click menu item "Connect"
			else
				click bt
			end if
		end tell
	end tell
end tell
EOF
}

function tab {
    [ `uname -s` != "Darwin" ] && echo "Cannot run on non-macosx system." && return
    local cmd=""
    local cdto="$PWD"
    local args="$@"

    if [ -d "$1" ]; then
        cdto=`cd "$1"; pwd`
        args="${@:2}"
    fi

    if [ -n "$args" ]; then
        cmd="$args"
    fi

    osascript -i <<EOF
tell application "iTerm"
    tell current window
        create tab with default profile
        tell the current session
            write text "cd \"$cdto\"; $cmd"
            write text "clear; $cmd"
        end tell
    end tell
end tell
EOF
}

function coffee {
    touch ~/.coffee
    if [[ $# -lt 1 ]]; then
        # Add cup of coffee
        date +%s >> ~/.coffee
    else
        if [ "$1" = "count" ]; then
            echo "$(< ~/.coffee wc -l) cups of coffee logged to date"
        fi
    fi
}

function squarespace {
    squarespace-server https://${SQUARESPACE_WEBSITE}.squarespace.com --auth --verbose
}

function cd {
    builtin cd "$@" && ls -a
}

function create-service {
    hub create MaritimeOptima/$1 -p
}

function git-clone {
    git clone git@github.com:MaritimeOptima/$1.git
}

function create-note {
    DATE=$(date "+%Y-%m-%d")
    touch "$1-$DATE.md"
}


function argocd-add {
    REMOTE=$(git config --get remote.origin.url)
    argocd repo add $REMOTE --ssh-private-key-path ~/.ssh/id_argocd_rsa --insecure-ignore-host-key 
}


function argocd-login {
    argocd login localhost:8080 --sso
}


function vault-login {
    # Requires a personal github token to be set
    # https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line
    vault login -method=github token=$GITHUB_TOKEN
}



function kafka-list-topics {
    kubectl -n infrastructure exec ${KAFKA_TEST_POD} -- \
    /usr/bin/kafka-topics --zookeeper ${ZOOKEEPER_ADDR} --list
}

function kafka-create-topic {
    kubectl -n infrastructure exec ${KAFKA_TEST_POD} -- \
    /usr/bin/kafka-topics --zookeeper ${ZOOKEEPER_ADDR} \
    --topic ${1} --create --partitions 1 --replication-factor 1
}

function kafka-delete-topic {
    kubectl -n infrastructure exec ${KAFKA_TEST_POD} -- \
    /usr/bin/kafka-topics --zookeeper ${ZOOKEEPER_ADDR} --delete \
    --topic ${1} 
}

function kafka-listen-topic {
    kubectl -n infrastructure exec -ti ${KAFKA_TEST_POD} -- \
    /usr/bin/kafka-console-consumer --bootstrap-server ${KAFKA_ADDR} \
    --topic $1 --from-beginning
}


